results <- rbind(results, row)
}
# KPSS Test
for (type in c("mu", "tau")) {
test <- ur.kpss(series, type = type, use.lag = lags_kpss)
crit_vals <- test@cval
row <- data.frame(
Test = "KPSS",
Model = type,
Statistic = round(test@teststat, 3),
CV_1pct = round(unname(crit_vals[,"1pct"]), 3),
CV_5pct = round(unname(crit_vals[,"5pct"]), 3),
CV_10pct = round(unname(crit_vals[,"10pct"]), 3)
)
results <- rbind(results, row)
}
results %>% row.names() <- NULL
return(results)
}
unit_root_table(economics$unemploy)
unit_root_table <- function(series, lags_adf = NULL, lags_kpss = NULL) {
series <- as.numeric(series)
n <- length(series)
if (is.null(lags_adf)) lags_adf <- trunc((n - 1)^(1/3))
if (is.null(lags_kpss)) lags_kpss <- trunc((n - 1)^(1/4))
results <- data.frame()
# ADF Test (only tau)
tau_names <- c(none = "tau1", drift = "tau2", trend = "tau3")
for (type in c("none", "drift", "trend")) {
test <- ur.df(series, type = type, lags = lags_adf)
stat_name <- tau_names[[type]]
stat <- test@teststat[, stat_name]
crit <- test@cval[stat_name, ]
row <- data.frame(
Test = "ADF",
Model = type,
Statistic = round(unname(stat), 3),
CV_1pct = round(crit["1pct"], 3),
CV_5pct = round(crit["5pct"], 3),
CV_10pct = round(crit["10pct"], 3)
)
results <- rbind(results, row)
}
# PP Test (Only Z-tau)
for (model in c("constant", "trend")) {
test <- ur.pp(series, type = "Z-tau", model = model, lags = "long")
row <- data.frame(
Test = "PP",
Model = model,
Statistic = round(test@teststat[[1]], 3),
CV_1pct = round(test@cval[1, "1pct"], 3),
CV_5pct = round(test@cval[1, "5pct"], 3),
CV_10pct = round(test@cval[1, "10pct"], 3)
)
results <- rbind(results, row)
}
# KPSS Test
for (type in c("mu", "tau")) {
test <- ur.kpss(series, type = type, use.lag = lags_kpss)
crit_vals <- test@cval
row <- data.frame(
Test = "KPSS",
Model = type,
Statistic = round(test@teststat, 3),
CV_1pct = round(unname(crit_vals[,"1pct"]), 3),
CV_5pct = round(unname(crit_vals[,"5pct"]), 3),
CV_10pct = round(unname(crit_vals[,"10pct"]), 3)
)
results <- rbind(results, row)
}
results %>% row.names() -> NULL
return(results)
}
unit_root_table(economics$unemploy)
unit_root_table <- function(series, lags_adf = NULL, lags_kpss = NULL) {
series <- as.numeric(series)
n <- length(series)
if (is.null(lags_adf)) lags_adf <- trunc((n - 1)^(1/3))
if (is.null(lags_kpss)) lags_kpss <- trunc((n - 1)^(1/4))
results <- data.frame()
# ADF Test (only tau)
tau_names <- c(none = "tau1", drift = "tau2", trend = "tau3")
for (type in c("none", "drift", "trend")) {
test <- ur.df(series, type = type, lags = lags_adf)
stat_name <- tau_names[[type]]
stat <- test@teststat[, stat_name]
crit <- test@cval[stat_name, ]
row <- data.frame(
Test = "ADF",
Model = type,
Statistic = round(unname(stat), 3),
CV_1pct = round(crit["1pct"], 3),
CV_5pct = round(crit["5pct"], 3),
CV_10pct = round(crit["10pct"], 3)
)
results <- rbind(results, row)
}
# PP Test (Only Z-tau)
for (model in c("constant", "trend")) {
test <- ur.pp(series, type = "Z-tau", model = model, lags = "long")
row <- data.frame(
Test = "PP",
Model = model,
Statistic = round(test@teststat[[1]], 3),
CV_1pct = round(test@cval[1, "1pct"], 3),
CV_5pct = round(test@cval[1, "5pct"], 3),
CV_10pct = round(test@cval[1, "10pct"], 3)
)
results <- rbind(results, row)
}
# KPSS Test
for (type in c("mu", "tau")) {
test <- ur.kpss(series, type = type, use.lag = lags_kpss)
crit_vals <- test@cval
row <- data.frame(
Test = "KPSS",
Model = type,
Statistic = round(test@teststat, 3),
CV_1pct = round(unname(crit_vals[,"1pct"]), 3),
CV_5pct = round(unname(crit_vals[,"5pct"]), 3),
CV_10pct = round(unname(crit_vals[,"10pct"]), 3)
)
results <- rbind(results, row)
}
row.names(results) <- NULL
return(results)
}
unit_root_table(economics$unemploy)
par(mfrow = c(2,2))
plot(USMacro$date, USMacro$r, type = 'l', ylab = 'r', xlab = '')
plot(USMacro$date, USMacro$lm, type = 'l', ylab = 'lm', xlab = '')
# get the data ====
USMacro <- read_csv("~/Downloads/USMacro.csv")
USMacro <- USMacro %>% select(r, lm, lp, lo)
USMacro$date <- seq(as.Date('1959-01-01'), as.Date('1998-12-01'), by = 'm')
par(mfrow = c(2,2))
plot(USMacro$date, USMacro$r, type = 'l', ylab = 'r', xlab = '')
plot(USMacro$date, USMacro$lm, type = 'l', ylab = 'lm', xlab = '')
plot(USMacro$date, USMacro$lp, type = 'l', ylab = 'lp', xlab = '')
plot(USMacro$date, USMacro$lo, type = 'l', ylab = 'lo', xlab = '')
plot(diff(USMacro$r), type = 'l', ylab = 'r', xlab = '')
plot(diff(USMacro$lm), type = 'l', ylab = 'lm', xlab = '')
plot(diff(USMacro$lp), type = 'l', ylab = 'lp', xlab = '')
plot(diff(USMacro$lo), type = 'l', ylab = 'lo', xlab = '')
library(forecast)
date <- seq(as.Date('1959-02-01'), as.Date('1998-12-01'), by = 'm')
diff(USMacro)
USMacro_diff <- diff(USMacro[,c('r', 'lm', 'lp', 'lo')])
USMacro[,c('r', 'lm', 'lp', 'lo')]
diff(USMacro[,c('r', 'lm', 'lp', 'lo')])
USMacro_diff <- data.frame(date = seq(as.Date('1959-02-01'), as.Date('1998-12-01'), by = 'm'),
r_diff = diff(USMacro$r),
lm_diff = diff(USMacro$lm),
lp_diff = diff(USMacro$lp),
lo_diff = diff(USMacro$lo)
)
View(USMacro_diff)
auto.arima(USMacro_diff$lo_diff)
auto.arima(USMacro_diff$r_diff)
auto.arima(USMacro_diff$lm_diff)
auto.arima(USMacro_diff$lp_diff)
auto.arima(USMacro_diff$lo_diff)
auto.arima(USMacro_diff$lo_diff, seasonal = TRUE)
auto.arima(USMacro_diff$lo_diff, method = 'ml')
auto.arima(USMacro_diff$lo_diff)
arima(USMacro_diff$lo_diff, order = c(1, 0, 1), method = 'ml')
arima(USMacro_diff$lo_diff, order = c(1, 0, 1), method = 'ML')
set.seed(2025)
T <- 1000
e <- rnorm(T)
x0 <- rnorm(1)
e0 <- rnorm(1)
X <- numeric(T)
X[1] <- -0.5*x0 + 0.3*e[1] + e0
for(t in 2:T){
X[t] <- -0.5*X[t-1] + 0.3*e[t-1] + e[t]
}
table_aic <- matrix(nrow = 6, ncol = 6)
table_bic <- matrix(nrow = 6, ncol = 6)
for(i in 1:6){
for(j in 1:6){
fit_arima <- arima(X, order = c(i-1,0,j-1), include.mean = FALSE, method = "ML")
table_aic[i,j] <- AIC(fit_arima)
table_bic[i,j] <- BIC(fit_arima)
}
}
table_bic
table_aic
table_aic_min <- matrix(0, nrow=6, ncol=6)
table_bic_min <- matrix(0, nrow=6, ncol=6)
for(i in 1:1000) {
set.seed(i + 123)
T <- 500
e <- rnorm(T)
x0 <- rnorm(1)
e0 <- rnorm(1)
X <- numeric(T)
X[1] <- -0.5 * x0 + 0.3 * e[1] + e0
for (t in 2:T) {
X[t] <- -0.5 * X[t - 1] + 0.3 * e[t - 1] + e[t]
}
table_aic <- matrix(nrow = 6, ncol = 6)
table_bic <- matrix(nrow = 6, ncol = 6)
for (i in 1:6) {
for (j in 1:6) {
fit_arima <- arima(
X,
order = c(i - 1, 0, j - 1),
include.mean = FALSE,
method = "ML"
)
table_aic[i, j] <- AIC(fit_arima)
table_bic[i, j] <- BIC(fit_arima)
}
}
global_min_bic <- min(table_bic, na.rm = TRUE)
global_min_aic <- min(table_aic, na.rm = TRUE)
min_aic <- which(table_aic == global_min_aic, arr.ind = TRUE)
min_bic <- which(table_bic == global_min_bic, arr.ind = TRUE)
table_aic_min[min_aic[1], min_aic[2]] <-
table_aic_min[min_aic[1], min_aic[2]] + 1
table_bic_min[min_bic[1], min_bic[2]] <-
table_bic_min[min_bic[1], min_bic[2]] + 1
}
# Packages needed ====
library(tidyverse)
library(forecast)
source()
# get the data ====
USMacro <- read_csv("~/Downloads/USMacro.csv")
USMacro <- USMacro %>% select(r, lm, lp, lo)
USMacro$date <- seq(as.Date('1959-01-01'), as.Date('1998-12-01'), by = 'm')
par(mfrow = c(2,2))
plot(USMacro$date, USMacro$r, type = 'l', ylab = 'r', xlab = '')
plot(USMacro$date, USMacro$lm, type = 'l', ylab = 'lm', xlab = '')
plot(USMacro$date, USMacro$lp, type = 'l', ylab = 'lp', xlab = '')
plot(USMacro$date, USMacro$lo, type = 'l', ylab = 'lo', xlab = '')
acf(USMacro$r, main = '', xlab = '', ylab = 'r')
acf(USMacro$lm, main = '', xlab = '', ylab = 'lm')
acf(USMacro$lp, main = '', xlab = '', ylab = 'lp')
acf(USMacro$lo, main = '', xlab = '', ylab = 'lo')
plot(diff(USMacro$r), type = 'l', ylab = 'r', xlab = '')
plot(diff(USMacro$lm), type = 'l', ylab = 'lm', xlab = '')
plot(diff(USMacro$lp), type = 'l', ylab = 'lp', xlab = '')
plot(diff(USMacro$lo), type = 'l', ylab = 'lo', xlab = '')
date <- seq(as.Date('1959-02-01'), as.Date('1998-12-01'), by = 'm')
USMacro_diff <- data.frame(date = seq(as.Date('1959-02-01'), as.Date('1998-12-01'), by = 'm'),
r_diff = diff(USMacro$r),
lm_diff = diff(USMacro$lm),
lp_diff = diff(USMacro$lp),
lo_diff = diff(USMacro$lo))
auto.arima(USMacro_diff$r_diff)
auto.arima(USMacro_diff$lm_diff)
auto.arima(USMacro_diff$lp_diff)
auto.arima(USMacro_diff$lo_diff)
arima(USMacro_diff$lo_diff, order = c(1, 0, 1), method = 'ML')
# packages ====
library(readxl)
# data ====
svar_us <- read_excel("Documents/PhD/Econometrics II/SVAR/svar_us.xls",
skip = 14)
library(vars)
library(tidyverse)
View(svar_us)
View(svar_us)
View(svar_us)
View(svar_us)
ts_data <- ts(svar_us_df[, c("gdp", "ur", 'infl', 'ir', 'ydef')], start = c(1955, 1), frequency = 4)
ts_svar_us <- ts(svar_us[, c("gdp", "ur", 'infl', 'ir', 'ydef')], start = c(1955, 1), frequency = 4)
ts_svar_us <- ts(svar_us[, c("gdp", "ur", 'infl', 'ir', 'ydefl')], start = c(1955, 1), frequency = 4)
View(ts_svar_us)
plot(ts_svar_us)
# svar ====
VARselect(ts_svar_us, lag.max = 10, type = "const")
# svar ====
summary(VARselect(ts_svar_us, lag.max = 10, type = "const"))
# svar ====
VARselect(ts_svar_us, lag.max = 10, type = "const")$selection
# svar ====
VARselect(ts_svar_us, lag.max = 5, type = "const")
# svar ====
VARselect(ts_svar_us, lag.max = 5, type = "const")$selection[["AIC(n)"]]
# svar ====
VARselect(ts_svar_us, lag.max = 5, type = "const")$selection[["BIC(n)"]]
# svar ====
VARselect(ts_svar_us, lag.max = 5, type = "const")$selection[["SN(n)"]]
# svar ====
VARselect(ts_svar_us, lag.max = 5, type = "const")$selection[["SC(n)"]]
# svar ====
VARselect(ts_svar_us, lag.max = 10, type = "const")$selection[["SC(n)"]]
var_model <- VAR(ts_svar_us, p = 1, type = "const")
var_model
summary(var_model)
# IRF ====
oirf <- irf(var_model, boot = TRUE)
fevd <- fevd(var_model, n.ahead = 20)
plot(oirf)
plot(fevd)
# STRUCTURAL VARS ====
# identification
svar_short <- SVAR(var_model, estmethod = "Cholesky")
# STRUCTURAL VARS ====
# identification
svar_short <- vars::SVAR(var_model, estmethod = "Cholesky")
library(svars)
install.packages("svars")
library(svars)
# STRUCTURAL VARS ====
# identification
svar_short <- id.chol(var_model)
oirf_svar <- irf(svar_short)
fevd_svar <- fevd(svar_short)
plot(oirf_svar)
plot(fevd_svar)
plot(oirf_svar)
svar_short
svar_short[5,]
svar_short[5,1]
svar_short[1]
svar_short[1][2,5]
svar_short[1][2]
svar_short[1][1]
svar_short[1][1][2]
View(svar_short)
svar_short[["B"]][1,2]
svar_short[["B"]][4,2]
svar_short_4fun <- id.chol(var_model) # define identification
svar_short_4fun[["B"]][4,2] <- 0
oirf_svar <- irf(svar_short_4fun)
fevd_svar <- fevd(svar_short_4fun)
plot(oirf_svar)
svar_short_4fun[["B"]][5,c(2,3,4)]
svar_short_4fun[["B"]][5,c(2,3,4)] <- 0
oirf_svar <- irf(svar_short_4fun)
fevd_svar <- fevd(svar_short_4fun)
plot(oirf_svar)
oirf_svar <- irf(svar_short)
fevd_svar <- fevd(svar_short)
plot(oirf_svar)
plot(fevd_svar)
# Blanchard and Quah ====
LR <- matrix(NA, 5, 5)
LR
LR[1, 2:4] <- 0
LR
LR[2, 3:4] <- 0
LR[1, 2:4] <- 0
LR[2, 3:4] <- 0
LR[3, 5] <- 0
LR[4, 5] <- 0
LR[5, 1:3] <- 0
LR
# LR VAR
svar_longrun <- id.longrun(var_model, LR = LR)
library(svars)
# LR VAR
svar_longrun <- id.longrun(var_model, LR = LR)
packageVersion("svars")
install.packages("svars", dependencies = TRUE)
packageVersion("svars")
# packages ====
library(readxl)
library(vars)
library(svars)
library(tidyverse)
# LR VAR
svar_longrun <- id.longrun(var_model, LR = LR)
packageVersion("svars")
roots(var_model)
sum(LR == 0, na.rm = TRUE)
# LR VAR
svar_longrun <- id.longrun(var_model, LR = LR)
# LR VAR
svar_longrun <- id.lr(var_model, restriction_matrix = LR)
# Instale o remotes se ainda não tiver
install.packages("remotes")
# Reinstale svars da fonte correta
remotes::install_github("HCHerwartz/svars", build_vignettes = TRUE)
id.lrr()
jotest <- ca.jo(ts_svar_us, type = "trace", K = 2, spec = "transitory")
summary(jotest)
vecm <- SVEC(jotest, LR = longrun_restrictions, SR = NULL)
vecm <- SVEC(jotest, LR = LR, SR = NULL)
LR
# LR VAR
Phi <- irf(var_model, n.ahead = 100, ortho = FALSE)$irf
array(unlist(Phi), dim = c(5, 5, 100))
Phi_array <- array(unlist(Phi), dim = c(5, 5, 100))
Psi1 <- apply(Phi_array, c(1, 2), sum)
Sigma <- crossprod(resid(var_model)) / nrow(resid(var_model))
Psi1_inv <- solve(Psi1)
A <- Psi1_inv %*% Sigma %*% t(Psi1_inv)
S_tilde <- t(chol(A))  # lower triangular
# Finally, recover structural impact matrix
S_structural <- Psi1 %*% S_tilde
S_structural
objective <- function(params) {
S <- matrix(0, 5, 5)
S[lower.tri(S, diag = TRUE)] <- params  # triangular assumption
F <- Psi1 %*% S
penalty <- 0
for (i in 1:5) {
for (j in 1:5) {
if (!is.na(LR[i, j]) && LR[i, j] == 0) {
penalty <- penalty + F[i, j]^2
}
}
}
# enforce S S' ≈ Sigma
Sigma_hat <- S %*% t(S)
penalty <- penalty + sum((Sigma_hat - Sigma)^2)
return(penalty)
}
start <- rep(0.1, 15)  # lower triangular of 5x5
opt <- optim(start, objective, method = "BFGS", control = list(maxit = 10000))
S_est <- matrix(0, 5, 5)
S_est[lower.tri(S_est, diag = TRUE)] <- opt$par
Phi_h <- irf(var_model, n.ahead = 20, ortho = FALSE, cumulative = FALSE)$irf
Phi_array <- array(unlist(Phi_h), dim = c(5, 5, 20))
IRFs <- lapply(1:20, function(h) Phi_array[, , h] %*% S_est)
irf_gdp_shock1 <- sapply(IRFs, function(M) M[1,1])
plot(0:19, irf_gdp_shock1, type = "l", ylab = "IRF", main = "GDP response to shock 1")
# LR VAR
BQ(var_model)
# LR VAR
BQ(var_model, LR = LR)
# LR VAR
BQ(var_model)
# LR VAR
model_bq <- BQ(var_model)
irf(model_bq)
plot(irf(model_bq))
# Set WD:
setwd('/Users/gustavovital/Documents/GitHub/Forecasting-Inflation')
# get DATA
data_montly_d <- readRDS("data/data_montly_d.rds")
data_montly_l <- readRDS("data/data_montly_l.rds")
# libraries ====
library(vars)
library(BMR)
library(tidyverse)
#...............................................................................
# Settings ----
#...............................................................................
var_model_vars <- list(
VAR_I     = c("p_livre", "p_admin", "brlx", "r"),
VAR_II    = c("p_livre", "p_admin", "brlx", "selic", "pi_sa", "m1"),
VAR_III   = c("p_livre", "selic", "brlx", "pi"),
BVAR_I    = c("p_livre", "p_admin", "brlx", "selic", "pi", "m1"),
BVAR_II   = c("p_livre", "p_admin", "brlx", "selic", "pi_sa", "m1"),
BVAR_III  = c("p_livre", "p_admin", "brlx", "r"),
VECM      = c("p_livre", "selic", "brlx", "pi")
)
var_model_lags <- list(
VAR_I     = 2,
VAR_II    = 6,
VAR_III   = 1,
BVAR_I    = 6,
BVAR_II   = 6,
BVAR_III  = 2,
VECM      = 1
)
#...............................................................................
# Estimating models ----
#...............................................................................
for(vars in 1:length(var_model_vars)){
if(vars == 1 | vars == 2 | vars == 3){
print(paste('Estimating VAR:', vars))
data_var <- data_montly_d[c('date', unlist(var_model_vars[vars]))] %>%
column_to_rownames("date")
var_model <- VAR(data_var, p = unlist(var_model_lags[vars]), type = 'const')
forecast_var <- predict(var_model, n.ahead = 12)
} else {
if(vars == 4 | vars == 5 | vars == 6){
print(paste('Estimating VAR:', vars))
data_var <- data_montly_d[c('date', unlist(var_model_vars[vars]))] %>%
column_to_rownames("date")
vars_names <- names(data_var)
coef_prior <- sapply(vars_names[vars_names != "date"], function(name) {
as.numeric(arima(data_montly_d[[name]], order = c(1,0,0))$coef[1])
})
Y <- data.matrix(na.omit(data_var))
bvar_model <- new(bvarm)
bvar_model$build(
Y, intercept = TRUE, lags = unlist(var_model_lags[vars]))
bvar_model$prior(coef_prior, 1, 1, 0.5, 0.5, 100, 1)
bvar_model$gibbs(10000)
forecast_bvar <- forecast(
bvar_model, shocks = FALSE,
var_names = colnames(Y), n_ahead = 12, back_data = 10,
plot=TRUE)
} else{
print(paste('Estimating VAR:', vars))
data_var <- data_montly_l[c('date', unlist(var_model_vars[vars]))] %>%
column_to_rownames("date")
apply(
data_var, 2, function(y) summary(
ur.df(y, type = "drift", selectlags = "AIC")))
jotest <- ca.jo(data_var, type = "trace", ecdet = "const", K = 2)
summary(jotest)
vecm_model <- cajorls(jotest, r = 2)
vec2var_model <- vec2var(jotest, r = 2)
forecast_vec <- predict(vec2var_model, n.ahead = 12)
}
}
}
forecast_vec
plot(forecast_vec)
plot(forecast_vec)
plot(forecast_bvar)
plot(forecast_bvar)
forecast_bvar
