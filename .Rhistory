geom_line(aes(y = weighted_sentiment_finbert_2, colour = "FinBERT (k = 2)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_3, colour = "FinBERT (k = 3)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_4, colour = "FinBERT (k = 4)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_5, colour = "FinBERT (k = 5)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_6, colour = "FinBERT (k = 6)"), alpha = 0.55, size = 1.2) +
scale_colour_manual(values = reds, name = NULL) +          # no legend title
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
rm(list = ls())
data <- readRDS("~/Documents/GitHub/PhDEcon107/data/data2.rds")
reds <- c("#FFCCCC", "#FF6666", "#FF0000", "#CC0000", "#990000", "#660000")
# FinBERT ====
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = weighted_sentiment_finbert,   colour = "FinBERT (k = 1)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_2, colour = "FinBERT (k = 2)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_3, colour = "FinBERT (k = 3)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_4, colour = "FinBERT (k = 4)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_5, colour = "FinBERT (k = 5)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_6, colour = "FinBERT (k = 6)"), alpha = 0.55, size = 1.2) +
scale_colour_manual(values = reds, name = NULL) +          # no legend title
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
# yiyanghkust ====
blues <- c("#CCE5FF", "#99CCFF", "#66B2FF", "#3399FF", "#007FFF", "#0059B3")
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = weighted_sentiment_yiyanghkust,   colour = "yiyanghkust (k = 1)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_2, colour = "yiyanghkust (k = 2)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_3, colour = "yiyanghkust (k = 3)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_4, colour = "yiyanghkust (k = 4)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_5, colour = "yiyanghkust (k = 5)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_6, colour = "yiyanghkust (k = 6)"), alpha = 0.55, size =1.2) +
scale_colour_manual(values = blues, name = NULL) +          # no legend title
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = weighted_sentiment_yiyanghkust,   colour = "Yiyanghkust (k = 1)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_2, colour = "Yiyanghkust (k = 2)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_3, colour = "Yiyanghkust (k = 3)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_4, colour = "Yiyanghkust (k = 4)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_5, colour = "Yiyanghkust (k = 5)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_6, colour = "Yiyanghkust (k = 6)"), alpha = 0.55, size =1.2) +
scale_colour_manual(values = blues, name = NULL) +          # no legend title
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
# FinBERT ====
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = weighted_sentiment_finbert,   colour = "FinBERT (k = 1)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_2, colour = "FinBERT (k = 2)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_3, colour = "FinBERT (k = 3)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_4, colour = "FinBERT (k = 4)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_5, colour = "FinBERT (k = 5)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_6, colour = "FinBERT (k = 6)"), alpha = 0.55, size = 1.2) +
scale_colour_manual(values = reds, name = NULL) +          # no legend title
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
# FinBERT ====
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = weighted_sentiment_finbert,   colour = "FinBERT (k = 1)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_2, colour = "FinBERT (k = 2)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_3, colour = "FinBERT (k = 3)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_4, colour = "FinBERT (k = 4)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_5, colour = "FinBERT (k = 5)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_6, colour = "FinBERT (k = 6)"), alpha = 0.55, size = 1.2) +
scale_colour_manual(values = reds, name = NULL) +          # no legend title
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
data
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = ICC))
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = ICC)) +
geom_line(aes(y = weighted_sentiment_finbert))
View(data)
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = ICC))
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = ICC)) +
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = ICC), size = 1.2, colour = 'gray60') +
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = ICC), size = 1.2, colour = 'gray60') +
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
cor(data$weighted_sentiment_finbert, data$ICC)
cor(data$weighted_sentiment_finbert, data$icc_diff)
cor(data$weighted_sentiment_finbert, data$ICC)
cor(data$weighted_sentiment_yiyanghkust, data$ICC)
cor(data$weighted_sentiment_yiyanghkust, data$ICC)
cor(data$weighted_sentiment_finbert_2, data$ICC)
cor(data$weighted_sentiment_finbert_3, data$ICC)
cor(data$weighted_sentiment_finbert_4, data$ICC)
cor(data$weighted_sentiment_finbert_5, data$ICC)
cor(data$weighted_sentiment_finbert_6, data$ICC)
# correlations ====
for(i in 1:6){
for(j in 1:2){
if(j == 1){
if(i == 1){
cor(data$weighted_sentiment_finbert, data$ICC)
}
}
else{
}
}
}
# correlations ====
for(i in 1:6){
for(j in 1:2){
if(j == 1){
if(i == 1){
print(cor(data$weighted_sentiment_finbert, data$ICC))
}
}
else{
}
}
}
# correlations ====
cor(data$weighted_sentiment_finbert, data$ICC)
cor(data$weighted_sentiment_finbert_2, data$ICC)
cor(data$weighted_sentiment_finbert_3, data$ICC)
cor(data$weighted_sentiment_finbert_4, data$ICC)
cor(data$weighted_sentiment_finbert_5, data$ICC)
cor(data$weighted_sentiment_finbert_6, data$ICC)
cor(data$weighted_sentiment_yiyanghkust_6, data$ICC)
# Growth Rate ====
growth_rate <- function(x) {
c(NA, diff(x) / lag(x, k = -1) * 100)
}
growth_rate(data$weighted_sentiment_finbert)
# Growth Rate ====
growth_rate <- function(x) {
c(NA, diff(x) / dplyr::lag(x, k = -1) * 100)
}
growth_rate(data$weighted_sentiment_finbert)
diff(data$weighted_sentiment_finbert)
# Growth Rate ====
growth_rate <- function(x) {
c(NA, diff(x) / dplyr::lag(x, k = 1) * 100)
}
growth_rate(data$weighted_sentiment_finbert)
c(NA, diff(data$weighted_sentiment_finbert) / dplyr::lag(data$weighted_sentiment_finbert, k = 1) * 100)
c(NA, diff(data$weighted_sentiment_finbert) / dplyr::lag(data$weighted_sentiment_finbert) * 100)
cor(data$weighted_sentiment_yiyanghkust, data$weighted_sentiment_finbert)
cor(data$weighted_sentiment_yiyanghkust, data$weighted_sentiment_finbert)
cor(data$weighted_sentiment_yiyanghkust_2, data$weighted_sentiment_finbert_2)
cor(data$weighted_sentiment_yiyanghkust_3, data$weighted_sentiment_finbert_3)
cor(data$weighted_sentiment_yiyanghkust_4, data$weighted_sentiment_finbert_4)
cor(data$weighted_sentiment_yiyanghkust_5, data$weighted_sentiment_finbert_5)
cor(data$weighted_sentiment_yiyanghkust_6, data$weighted_sentiment_finbert_6)
library(ura)
library(urca)
# Unit Root test ====
ur.df(data$weighted_sentiment_finbert)
# Unit Root test ====
summary(ur.df(data$weighted_sentiment_finbert))
plot(data$weighted_sentiment_finbert)
plot(data$weighted_sentiment_finbert, type='l')
# Unit Root test ====
summary(ur.pp(data$weighted_sentiment_finbert))
# Unit Root test ====
summary(ur.df(data$weighted_sentiment_finbert))
# Unit Root test ====
summary(ur.df(data$weighted_sentiment_finbert_2))
# Unit Root test ====
summary(ur.df(data$weighted_sentiment_finbert_3))
# Unit Root test ====
summary(ur.df(data$weighted_sentiment_finbert_4))
# Unit Root test ====
summary(ur.df(data$weighted_sentiment_yiyanghkust))
# Unit Root test ====
summary(ur.df(data$weighted_sentiment_yiyanghkust_2))
# correlations ====
cor(data$weighted_sentiment_finbert, data$ICC)
cor(data$weighted_sentiment_finbert_2, data$ICC)
cor(data$weighted_sentiment_finbert_3, data$ICC)
cor(data$weighted_sentiment_finbert_4, data$ICC)
cor(data$weighted_sentiment_finbert_5, data$ICC)
cor(data$weighted_sentiment_finbert_6, data$ICC)
cor(data$weighted_sentiment_yiyanghkust, data$ICC)
cor(data$weighted_sentiment_yiyanghkust_2, data$ICC)
cor(data$weighted_sentiment_yiyanghkust_3, data$ICC)
cor(data$weighted_sentiment_yiyanghkust_4, data$ICC)
cor(data$weighted_sentiment_yiyanghkust_5, data$ICC)
cor(data$weighted_sentiment_yiyanghkust_6, data$ICC)
cor(data$weighted_sentiment_yiyanghkust, data$weighted_sentiment_finbert)
cor(data$weighted_sentiment_yiyanghkust_2, data$weighted_sentiment_finbert_2)
cor(data$weighted_sentiment_yiyanghkust_3, data$weighted_sentiment_finbert_3)
cor(data$weighted_sentiment_yiyanghkust_4, data$weighted_sentiment_finbert_4)
cor(data$weighted_sentiment_yiyanghkust_5, data$weighted_sentiment_finbert_5)
cor(data$weighted_sentiment_yiyanghkust_6, data$weighted_sentiment_finbert_6)
# FinBERT ====
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = weighted_sentiment_finbert,   colour = "FinBERT (k = 1)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_2, colour = "FinBERT (k = 2)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_3, colour = "FinBERT (k = 3)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_4, colour = "FinBERT (k = 4)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_5, colour = "FinBERT (k = 5)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_6, colour = "FinBERT (k = 6)"), alpha = 0.55, size = 1.2) +
scale_colour_manual(values = reds, name = NULL) +          # no legend title
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = weighted_sentiment_yiyanghkust,   colour = "Yiyanghkust (k = 1)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_2, colour = "Yiyanghkust (k = 2)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_3, colour = "Yiyanghkust (k = 3)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_4, colour = "Yiyanghkust (k = 4)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_5, colour = "Yiyanghkust (k = 5)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_6, colour = "Yiyanghkust (k = 6)"), alpha = 0.55, size =1.2) +
scale_colour_manual(values = blues, name = NULL) +          # no legend title
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = ICC), size = 1.2, colour = 'gray60') +
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
cor(data$weighted_sentiment_finbert, data$ICC)
cor(data$weighted_sentiment_finbert_2, data$ICC)
cor(data$weighted_sentiment_finbert_3, data$ICC)
cor(data$weighted_sentiment_finbert_4, data$ICC)
cor(data$weighted_sentiment_finbert_5, data$ICC)
cor(data$weighted_sentiment_finbert_6, data$ICC)
cor(data$weighted_sentiment_yiyanghkust, data$ICC)
cor(data$weighted_sentiment_yiyanghkust_2, data$ICC)
cor(data$weighted_sentiment_yiyanghkust_3, data$ICC)
cor(data$weighted_sentiment_yiyanghkust_4, data$ICC)
cor(data$weighted_sentiment_yiyanghkust_5, data$ICC)
cor(data$weighted_sentiment_yiyanghkust_6, data$ICC)
cor(data$weighted_sentiment_yiyanghkust, data$weighted_sentiment_finbert)
cor(data$weighted_sentiment_yiyanghkust_2, data$weighted_sentiment_finbert_2)
cor(data$weighted_sentiment_yiyanghkust_3, data$weighted_sentiment_finbert_3)
cor(data$weighted_sentiment_yiyanghkust_4, data$weighted_sentiment_finbert_4)
cor(data$weighted_sentiment_yiyanghkust_5, data$weighted_sentiment_finbert_5)
cor(data$weighted_sentiment_yiyanghkust_6, data$weighted_sentiment_finbert_6)
library(patchwork)
# FinBERT ====
p_f <- data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = weighted_sentiment_finbert,   colour = "FinBERT (k = 1)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_2, colour = "FinBERT (k = 2)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_3, colour = "FinBERT (k = 3)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_4, colour = "FinBERT (k = 4)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_5, colour = "FinBERT (k = 5)"), alpha = 0.55, size = 1.2) +
geom_line(aes(y = weighted_sentiment_finbert_6, colour = "FinBERT (k = 6)"), alpha = 0.55, size = 1.2) +
scale_colour_manual(values = reds, name = NULL) +          # no legend title
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
p_y <- data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = weighted_sentiment_yiyanghkust,   colour = "Yiyanghkust (k = 1)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_2, colour = "Yiyanghkust (k = 2)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_3, colour = "Yiyanghkust (k = 3)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_4, colour = "Yiyanghkust (k = 4)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_5, colour = "Yiyanghkust (k = 5)"), alpha = 0.55, size =1.2) +
geom_line(aes(y = weighted_sentiment_yiyanghkust_6, colour = "Yiyanghkust (k = 6)"), alpha = 0.55, size =1.2) +
scale_colour_manual(values = blues, name = NULL) +          # no legend title
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
p_icc <- data %>%
ggplot(aes(x = DATE)) +
geom_line(aes(y = ICC), size = 1.2, colour = 'gray60') +
theme_minimal() +
theme(
legend.position = "bottom",                              # legend below plot
axis.title.x  = element_blank(),                         # remove x-axis title
axis.title.y  = element_blank()                          # remove y-axis title
)
p_f / p_y / p_icc
p_f + p_y
# Estimate Models ====
source('MSM.R')
View(models_list)
plotProb(models_list[["norm_finbert_lag_4"]])
plotProb(models_list[["norm_finbert_lag_4"]])
plotProb(models_list[["norm_finbert_lag_4"]], which = 1)
plotProb(models_list[["norm_finbert_lag_4"]], which = 2)
plotProb(models_list[["norm_finbert_lag_4"]], which = 3)
plotProb(models_list[["norm_yiyanghkust_lag_3"]])
plotProb(models_list[["norm_yiyanghkust_lag_3"]], which = 1)
plotProb(models_list[["norm_finbert_lag_4"]], which = 1)
plotProb(models_list[["norm_finbert_lag_4"]], which = 2)
plotProb(models_list[["norm_finbert_lag_4"]], which = 2)
plotProb(models_list[["norm_finbert_lag_4"]], which = 2)
p1 <- plotProb(models_list[["norm_finbert_lag_4"]], which = 2)
p1 + p1
p1 + p1
plotProb(models_list[["norm_finbert_lag_4"]], which = 1)
plotProb(models_list[["norm_finbert_lag_4"]], which = 1)
plotProb(models_list[["norm_finbert_lag_4"]], which = 2)
plotProb(models_list[["norm_yiyanghkust_lag_3"]], which = 1)
plotProb(models_list[["norm_yiyanghkust_lag_3"]], which = 2)
plotProb(models_list[["norm_finbert_lag_4"]], which = 1)
plotProb(models_list[["norm_finbert_lag_4"]], which = 2)
plotProb(models_list[["norm_yiyanghkust_lag_3"]], which = 1)
plotProb(models_list[["norm_finbert_lag_4"]], which = 1)
plotProb(models_list[["norm_yiyanghkust_lag_3"]], which = 3)
plotProb(models_list[["norm_yiyanghkust_lag_3"]], which = 1)
plotProb(models_list[["norm_finbert_lag_4"]], which = 1)
plotProb(models_list[["norm_finbert_lag_4"]], which = 2)
plotProb(models_list[["norm_yiyanghkust_lag_3"]], which = 1)
plotProb(models_list[["norm_yiyanghkust_lag_3"]], which = 2)
plotProb(models_list[["norm_finbert_lag_4"]], which = 1)
plotProb(models_list[["norm_finbert_lag_4"]], which = 2)
plotProb(models_list[["norm_yiyanghkust_lag_3"]], which = 1)
plotProb(models_list[["norm_yiyanghkust_lag_3"]], which = 2)
# Set WD:
setwd('/Users/gustavovital/Documents/GitHub/Forecasting-Inflation')
rm(list = ls())
source('requirement.R')
COVID_forecast_compound_ipca <- readRDS('data/COVID_forecast_compound_ipca.rds')
plot_forecast_error <- function(data, lags, compound) {
# Filter and prepare data
FP <- data %>%
dplyr::filter(COMPOUND == 'Free Prices') %>%
arrange(date)
CP <- data %>%
dplyr::filter(COMPOUND == compound) %>%
group_by(COMPOUND, forecast_model) %>%
arrange(date) %>%
slice(lags) %>%
ungroup() %>%
arrange(date)
# Check if we can calculate metrics
if(nrow(FP) > 0 && nrow(CP) > 0) {
# Align dates for comparison - ensure we have matching dates with complete cases
merged_data <- inner_join(
FP %>% dplyr::select(date, FP_mean = mean),
CP %>% dplyr::select(date, CP_mean = mean),
by = "date"
)
if(nrow(merged_data) > 0) {
# Calculate error metrics
errors <- merged_data$CP_mean - merged_data$FP_mean
error_metrics <- data.frame(
MSE = mean(errors^2, na.rm = TRUE),
RMSE = sqrt(mean(errors^2, na.rm = TRUE)),
MAE = mean(abs(errors), na.rm = TRUE),
MAPE = mean(2 * abs(errors) / (abs(merged_data$FP_mean) + abs(merged_data$CP_mean)), na.rm = TRUE)) %>% # add * 100 to percentage
mutate(across(everything(), ~ ifelse(is.nan(.) | is.infinite(.), NA, round(., 4))))
# Print metrics
cat("\nForecast Evaluation Metrics for:", compound, "\n")
cat("----------------------------------------\n")
print(error_metrics)
cat("\nNumber of observations used:", nrow(merged_data), "\n")
cat("\n")
} else {
warning("No matching dates with complete cases between Free Prices and ", compound)
}
} else {
if(nrow(FP) == 0) warning("No Free Prices data available")
if(nrow(CP) == 0) warning("No forecast data available for ", compound)
}
FPCP <- bind_rows(
FP %>% mutate(COMPOUND = "Free Prices"),
CP %>% mutate(COMPOUND = compound)
) %>%
dplyr::filter(date <= as.Date('2025-01-01'))
if(nrow(FPCP) > 0) {
color_values <- c("Free Prices" = "black", "Other" = "black")
names(color_values)[2] <- compound
fill_values <- c("Free Prices" = "gray60", "Other" = "gray60")
names(fill_values)[2] <- compound
linetype_values <- c("Free Prices" = "solid", "Other" = "dotted")
names(linetype_values)[2] <- compound
date_breaks <- seq.Date(
from = min(FPCP$date, na.rm = TRUE),
to = max(FPCP$date, na.rm = TRUE),
by = "quarter"
)
date_labels <- function(x) {
quarters <- c("Q1", "Q2", "Q3", "Q4")
paste0(year(x), " ", quarters[quarter(x)])
}
p <- FPCP %>%
ggplot(aes(x = date, y = mean, color = COMPOUND, linetype = COMPOUND)) +
geom_ribbon(aes(ymin = lower_95, ymax = upper_95, fill = COMPOUND),
alpha = 0.15, linetype = 0) +
geom_ribbon(aes(ymin = lower_80, ymax = upper_80, fill = COMPOUND),
alpha = 0.25, linetype = 0) +
geom_line(size = .6) +
scale_color_manual(values = color_values) +
scale_fill_manual(values = fill_values) +
scale_linetype_manual(values = linetype_values) +
labs(title = paste(compound),
subtitle = "Dark band: 80% CI | Light band: 95% CI",
x = NULL, y = NULL,
color = NULL, linetype = NULL, fill = NULL) +
scale_x_date(breaks = date_breaks,
labels = date_labels,
minor_breaks = NULL) +
theme_minimal(base_size = 8) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
legend.position = "bottom",
plot.subtitle = element_text(color = "gray40", size = 8),
panel.grid.minor = element_blank())
return(p)
} else {
warning("No data available for plotting")
return(NULL)
}
}
# FORECAST PLOTS BY QUARTER ====
for(forecast in c(1,2,4)){
ci_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'CLASS I')
cii_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'CLASS II')
vm_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'VAR/VECM - M')
bv_m_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'BVAR - M')
vq_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'VAR/VECM - Q')
bv_q_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'BVAR - Q')
av_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'AVERAGE MODEL')
plot((ci_p + cii_p) / (vm_p + bv_m_p) / (vq_p + bv_q_p) / av_p)
}
forecast <- 1
ci_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'CLASS I')
cii_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'CLASS II')
vm_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'VAR/VECM - M')
bv_m_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'BVAR - M')
vq_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'VAR/VECM - Q')
bv_q_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'BVAR - Q')
av_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'AVERAGE MODEL')
ci_p
av_p
ci_p
ci_p + cii_p
(ci_p + vm_p)
(ci_p + vm_p + vq_p)
(ci_p + vm_p + vq_p) / (cii_p + bv_m_p + bv_q_p)
av_p
forecast <- 4
ci_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'CLASS I')
cii_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'CLASS II')
vm_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'VAR/VECM - M')
bv_m_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'BVAR - M')
vq_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'VAR/VECM - Q')
bv_q_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'BVAR - Q')
av_p <- plot_forecast_error(COVID_forecast_compound_ipca, forecast, 'AVERAGE MODEL')
(ci_p + vm_p + vq_p) / (cii_p + bv_m_p + bv_q_p)
av_p
